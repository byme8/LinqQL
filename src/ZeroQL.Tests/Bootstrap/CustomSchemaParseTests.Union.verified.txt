{
  postContentUnionInterface:
    [System.CodeDom.Compiler.GeneratedCode("ZeroQL", "1.0.0.0")]
    public interface PostContent : global::ZeroQL.IUnionType
    {
    }
,
  textContentClass:
    [ZeroQL.GraphQLType("TextContent")]
    [System.CodeDom.Compiler.GeneratedCode("ZeroQL", "1.0.0.0")]
    public class TextContent : PostContent
    {
        [ZeroQL.GraphQLName("text")]
        [JsonPropertyName("text")]
        public string Text { get; set; }
    }
,
  imageClass:
    [ZeroQL.GraphQLType("ImageContent")]
    [System.CodeDom.Compiler.GeneratedCode("ZeroQL", "1.0.0.0")]
    public class ImageContent : PostContent
    {
        [ZeroQL.GraphQLName("imageUrl")]
        [JsonPropertyName("imageUrl")]
        public string ImageUrl { get; set; }

        [ZeroQL.GraphQLName("height")]
        [JsonPropertyName("height")]
        public int Height { get; set; }
    }
,
  converter:
    internal class ZeroQLPostContentConverter(JsonSerializerOptions options) : InterfaceJsonConverter<PostContent?>
    {
        public override PostContent? Deserialize(string typeName, JsonObject json) => typeName switch
        {
            "ImageContent" => json.Deserialize<ImageContent>(options),
            "TextContent" => json.Deserialize<TextContent>(options),
            _ => json.Deserialize<PostContentStub>(options)
        };
    }
,
  initializers:
    internal static class GraphQLClientJsonInitializer
    {
        public static IZeroQLSerializer Configure(Action<JsonSerializerOptions> optionsFactory)
        {
            var options = CreateOptions();
            optionsFactory(options);

            return new ZeroQLSystemJsonSerializer(options);
        }

        public static IZeroQLSerializer CreateSerializer(JsonSerializerOptions? options = null)
        {
            return new ZeroQLSystemJsonSerializer(options ?? CreateOptions());
        }

        public static JsonSerializerOptions CreateOptions()
        {
            var options = ZeroQLJsonOptions.Create();
            options.TypeInfoResolver = new ZeroQLJsonSerializationContext();
            var converters = new Dictionary<Type, JsonConverter>
            {


                { typeof(global::TestApp.PostContent), new ZeroQLPostContentConverter(options) },
            };

            options.Converters.Insert(0, new ZeroQLConverter(converters));
            return options;
        }

    }

}