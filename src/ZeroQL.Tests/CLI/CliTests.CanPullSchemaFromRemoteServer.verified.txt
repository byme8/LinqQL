schema {
  query: Query
  mutation: Mutation
}

scalar uuid

type Query {
  int(int: Int!): Int!
  object(object: Int!): Int!
  containerWithoutError: ContainerWithoutError
  entities: [IEntity!]!
  figures: [IFigure!]!
  circles: [Circle!]!
  squares: [Square!]!
  jsonUsersElement: JSON!
  jsonUsersDocument: JsonDocument!
  longOperation: Int!
  instant: Instant!
  zonedDateTime: ZonedDateTime!
  posts: [PostContent!]!
  image: ImageContent!
  text: TextContent!
  figure: FigureContent!
  me: User!
  currentUser: User! @deprecated(reason: "Use Me instead")
  MEWITHSUPPERCASING: User!
  MeWithPascalCasing: User!
  users(filter: UserFilterInput page: Int size: Int): [User!]!
  userKinds: [UserKind!]!
  userKindPascals: [UserKindPascal!]!
  usersMatrix: [[User!]!]!
  usersByKind(kind: UserKind! page: Int! size: Int!): [User!]!
  usersIds(kind: UserKind page: Int! size: Int filter: String ids: [Int!]): [Int!]!
  user(id: Int!): User
  usersByIds(ids: [Int!]!): [User!]!
  userKind(id: Int!): UserKind!
  admin(id: Int!): User
  container: TypesContainer!
}

type Mutation {
  createUserId(id: uuid!): uuid!
  dateTime(dateTime: DateTime!): DateTime!
  dateTimes(dateTime: [DateTime]): [DateTime]
  dateTimeOffset(dateTimeOffset: DateTime!): DateTime!
  timeSpan(timeSpan: TimeSpan!): TimeSpan!
  dateOnly(dateOnly: Date!): Date!
  timeOnly(timeOnly: TimeSpan!): TimeSpan!
  createInstant(instant: Instant!): Instant!
  addUser(firstName: String! lastName: String!): User!
  doError: Int!
  addUserProfileImage(USER_ID: Int! file: Upload!): Int!
  addMyProfileImage(file: Upload!): Int!
  addUsersInfo(users: [UserInfoInput!]!): Int!
  addUsersInfoWithEmails(input: AddUsersInput!): Int!
  addUserKindPascal(userKindPascal: UserKindPascal!): Int!
  addLimit(limit: LimitInput!): Limit!
  addLimitNullable(limit: LimitInput): Limit
  addLimit2(limit: Limit2Input!): Limit2!
  addLimit2Nullable(limit: Limit2Input): Limit2
  addLimit3(limit: Limit3Input): Limit3
  addLimits(limit: [Limit2Input!]!): [Limit2!]!
  addLowerCaseTypeName(value: lower_case_type_nameInput!): lower_case_type_name!
  addValues(text: String! value1: Byte! value2: Byte value3: Short! value4: Short value5: Int! value6: Int value7: Long! value8: Long value9: Float! value10: Float value11: Float! value12: Float value13: Decimal! value14: Decimal value15: DateTime! value16: DateTime value17: Date! value18: Date value19: UUID! value20: UUID value21: [UUID!]! value22: [UUID!] value23: [UUID!]! value24: [UUID!] value25: [UUID!]! value26: [UUID!] value27: [KeyValuePairOfStringAndStringInput!]! value28: [KeyValuePairOfStringAndStringInput!] value29: KeyValuePairOfStringAndStringInput! value30: KeyValuePairOfStringAndStringInput value31: DateTime! value32: DateTime): Int!
}

"The `Upload` scalar type represents a file upload."
scalar Upload

"Represents an instant on the global timeline, with nanosecond resolution."
scalar Instant

"A LocalDateTime in a specific time zone and with a particular offset to distinguish between otherwise-ambiguous instants.\nA ZonedDateTime is global, in that it maps to a single Instant."
scalar ZonedDateTime

interface InterfaceThatNeverGetsUsed {
  id: Int!
}

interface IPerson {
  id: Int!
  firstName: String!
  lastName: String!
}

union PostContent = ImageContent | TextContent | FigureContent

type Person implements IPerson {
  id: Int!
  firstName: String!
  lastName: String!
}

type JsonDocument {
  rootElement: JSON!
}

scalar JSON

type Square implements IFigure & IEntity {
  creator(name: String): IPerson
  id: Int
  topLeft: Point!
  bottomRight: Point!
  perimeter: Float!
}

type Circle implements IFigure & IEntity {
  id: Int
  center: Point!
  radius: Float!
  perimeter: Float!
  creator: Person
}

interface IFigure {
  id: Int
  perimeter: Float!
  creator: IPerson
}

interface IEntity {
  id: Int
}

type ContainerWithError {
  value: String!
}

type ContainerWithoutError {
  value: String!
  containerWithError: ContainerWithError
}

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

type Role {
  id: Int!
  name: String!
}

type ImageContent {
  id: Int!
  imageUrl: String!
  resolution: ImageResolution!
  author: User!
}

type TextContent {
  id: Int!
  text: String!
  author: User!
}

type FigureContent {
  id: Int!
  figure: IFigure!
  author: User!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  userKind: UserKind!
  role: Role
  loginAttempts: [UserLoginAttempt!]!
}

input UserFilterInput {
  userKind: UserKind!
  page: PageInput
}

enum UserKind {
  SUPPER_GOOD
  GOOD
  BAD
}

enum UserKindPascal {
  default
  SupperGood
  Good
  Bad
}

type TypesContainer {
  text: String!
  value1: Byte!
  value2: Byte
  value3: Short!
  value4: Short
  value5: Int!
  value6: Int
  value7: Long!
  value8: Long
  value9: Float!
  value10: Float
  value11: Float!
  value12: Float
  value13: Decimal!
  value14: Decimal
  value15: DateTime!
  value16: DateTime
  value17: Date!
  value18: Date
  value19: UUID!
  value20: UUID
  value21: [UUID!]!
  value22: [UUID!]
  value23: [UUID!]!
  value24: [UUID!]
  value25: [UUID!]!
  value26: [UUID!]
  value27: [KeyValuePairOfStringAndString!]!
  value28: [KeyValuePairOfStringAndString!]
  value29: KeyValuePairOfStringAndString!
  value30: KeyValuePairOfStringAndString
  value31: DateTime!
  value32: DateTime
}

input UserInfoInput {
  firstName: String!
  lastName: String!
  avatar: Upload!
}

input AddUsersInput {
  user: UserInfoInput
}

type Limit {
  limit: Int!
  limitInput: Int!
}

input LimitInput {
  limit: Int!
  limitInput: Int!
}

type Limit2 {
  value: Int!
  limit2: Limit2!
}

input Limit2Input {
  value: Int!
  limit2: Limit2Input!
}

type Limit3 {
  limit3Input: Int!
}

input Limit3Input {
  limit3Input: Int!
}

type lower_case_type_name {
  value: Int!
}

input lower_case_type_nameInput {
  value: Int!
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The built-in `Decimal` scalar type."
scalar Decimal

scalar UUID

input KeyValuePairOfStringAndStringInput {
  key: String!
  value: String!
}

type UserLoginAttempt {
  time: DateTime!
  success: Boolean!
}

type KeyValuePairOfStringAndString {
  key: String!
  value: String!
}

input PageInput {
  count: Int!
  size: Int!
}

enum ImageResolution {
  _1360X720
  _1920X1080
  _2560X1440
  _3840X2160
}

type Point implements IFigure & IEntity {
  id: Int!
  x: Float!
  y: Float!
  perimeter: Float!
  creator: IPerson!
}

directive @tag(name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION